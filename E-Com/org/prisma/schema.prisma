// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  file_id    String
  userId     String?   @db.ObjectId
  shopId     String?   @db.ObjectId
  productsId String?   @db.ObjectId
  users      users?     @relation(fields: [userId], references: [id])
  shops      shops?     @relation(fields: [shopId], references: [id])
  products   products?  @relation(fields: [productsId], references: [id])
}


model users {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  email       String         @unique
  password    String?
  name        String
  avatar      images[]
  following   String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  shopReviews shopsReviews[]
}

model shopsReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  shopId    String?  @db.ObjectId
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id])
  shops     shops?   @relation(fields: [shopId], references: [id])
}

model shops {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images[]
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float          @default(0)
  reviews       shopsReviews[]
  sellerId      String         @unique @db.ObjectId
  sellers       sellers        @relation(fields: [sellerId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  products products[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  phone_number String
  password     String
  country      String
  name         String
  stripeId     String?
  shop         shops?
  shopId       String?  @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@unique([discountCode, sellerId])
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(0)
  totalSales            Int           @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
}
