// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  file_id    String
  userId     String?   @db.ObjectId
  shopId     String?   @db.ObjectId
  productsId String?   @db.ObjectId
  products   products?  @relation(fields: [productsId], references: [id])
}


model users {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  email       String         @unique
  password    String?
  name        String
  avatar      String?
  following   String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  shopReviews shopsReviews[]

  orders orders[]
  addresses address[] @relation("UserAddresses")

  notifications notifications[] @relation("NotificationCreator")

}

model shopsReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  shopId    String?  @db.ObjectId
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id])
  shops     shops?   @relation(fields: [shopId], references: [id])
}

model shops {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        String?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float          @default(0)
  reviews       shopsReviews[]
  sellerId      String         @unique @db.ObjectId
  sellers       sellers        @relation(fields: [sellerId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  products products[]

  followers followers[]

  orders orders[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  phone_number String
  password     String
  country      String
  name         String
  stripeId     String?
  shop         shops?
  shopId       String?  @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@unique([discountCode, sellerId])
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(0)
  totalSales            Int           @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])

  orderItem orderItems[]
}


model userAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  lastVisited  DateTime
  actions      Json
  country      String?
  city         String?
  device       String?
  recommendations Json?
  lastTrained DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model productAnalytics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   @unique @db.ObjectId
  shopId         String?  @db.ObjectId
  views          Int      @default(0)
  cartAdds       Int      @default(0)
  wishlistAdds   Int      @default(0)
  purchases      Int      @default(0)
  lastViewedAt   DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model followers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  shopId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Shops shops @relation(fields: [shopId], references: [id])
}

model orders {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userId           String     @db.ObjectId
  shopId           String     @db.ObjectId
  items            orderItems[]
  total            Float
  status           String     @default("pending")
  shippingAddressId String    @db.ObjectId
  couponCode       String?
  discountAmount   Float      @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relations
  User             users       @relation(fields: [userId], references: [id])
  Shop             shops      @relation(fields: [shopId], references: [id])

  Address address @relation(fields: [shippingAddressId], references: [id])
}

model orderItems {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String    @db.ObjectId
  productId       String    @db.ObjectId
  quantity        Int
  price           Float
  selectedOptions Json
  createdAt       DateTime  @default(now())

  // Relations
  Order           orders     @relation(fields: [orderId], references: [id])
  Product         products   @relation(fields: [productId], references: [id])
}

model notifications {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String
  creatorId     String   @db.ObjectId
  receiverId    String
  redirect_link String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  creator  users   @relation("NotificationCreator", fields: [creatorId], references: [id])
}
enum addressTypes {
  Home
  Work
  Other
}
model address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  label     addressTypes
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders orders[]
  user   users   @relation("UserAddresses", fields: [userId], references: [id])

}

model uniqueShopVisitors{
  id String @id @default(auto())@map("_id") @db.ObjectId
  shopId String @db.ObjectId
  userId String @db.ObjectId
  visitedAt DateTime @default(now())

  @@unique([shopId,userId])
}

model shopAnalytics{
  id String @id @default(auto())@map("_id") @db.ObjectId
  totalVisitors Int @default(0)
  countryStats Json?
  cityStats Json?
  deviceStats Json?
  lastVisitedAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}